{"version":3,"sources":["App/Animation/index.js","App/index.js","serviceWorker.js","index.js"],"names":["Animation","props","generateSprites","bind","getRendererSize","updateAnimationSize","CANVAS_SIZE","Size","ANIMATION_ROOT","React","createRef","PIXI_APP","renderer","PIXI","antialias","backgroundColor","stage","ticker","sprites","this","shared","add","load","render","LOW","start","appendChild","view","prevProps","parentSize","width","height","stop","parentStyle","display","alignItems","justifyContent","style","ref","elem","getScaledRect","container","target","policy","POLICY","ShowAll","resize","spriteURI","sheet","resources","spritesheet","frame","textures","char","char_sclera","WHITE","sky","addChild","anchor","set","position","Component","App","setWindowSize","debounce","state","windowSize","window","innerWidth","innerHeight","newWindowSize","prevWindowSize","setState","addEventListener","removeEventListener","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5e7beb33.chunk.js","sourcesContent":["import React from 'react';\nimport * as PIXI from 'pixi.js';\nimport { POLICY, Size, getScaledRect } from 'adaptive-scale/lib-esm';\n\nclass Animation extends React.Component {\n\n  /**\n   * \n   * @param {*} props \n   * @param {Size} props.parentSize\n   */\n  constructor(props) {\n    super(props);\n\n    this.generateSprites = this.generateSprites.bind(this);\n    this.getRendererSize = this.getRendererSize.bind(this);\n    this.updateAnimationSize = this.updateAnimationSize.bind(this);\n\n    /**\n     * CANVAS_SIZE are the dimensions the original\n     * poster (and) animation were designed for.\n     * \n     * This is the size the animation is rendered\n     * to before being scaled using\n     * this.props.parentSize.\n     */\n    this.CANVAS_SIZE = new Size(3200, 2320);\n    \n    /**\n     * animRootElem is a DOM reference to the base\n     * canvas element within which Pixi.js operates.\n     */\n    this.ANIMATION_ROOT = React.createRef();\n    this.PIXI_APP = {\n      renderer: new PIXI.autoDetectRenderer({\n        antialias: true,\n        /**\n         * Here I'm programmatically switching anim-\n         * ation colors based on runtime environment.\n         */\n        backgroundColor: (process.env.NODE_ENV === 'development' ?\n          (0x7b7b7b) :\n          (0xffffff)\n        ),\n      }),\n      stage: new PIXI.Container(),\n      ticker: new PIXI.Ticker(),\n      sprites: null,\n    };\n  }\n\n  componentDidMount() {\n    const { renderer, stage, ticker } = this.PIXI_APP;\n\n    /**\n     * (async)\n     * Load spritesheet and fire asset generator.\n     * \n     * TODO: consider using a downscaled sprite-\n     * sheet based on parentSize.\n     */\n    const spriteURI = 'spritesheetHQ.json';\n    PIXI.Loader.shared\n      .add(spriteURI)\n      .load(() => this.generateSprites(spriteURI));\n\n    ticker.add(\n      () => { renderer.render(stage); },\n      PIXI.UPDATE_PRIORITY.LOW\n    );\n\n    ticker.start();\n    this.ANIMATION_ROOT.appendChild(renderer.view);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.parentSize.width === this.props.parentSize.width &&\n      prevProps.parentSize.height === this.props.parentSize.height\n    ) return;\n\n    this.updateAnimationSize();\n  }\n\n  componentWillUnmount() {\n    this.PIXI_APP.ticker.stop();\n    this.PIXI_APP.renderer.stop();\n  }\n\n  render() {\n    const { width, height } = this.props.parentSize;\n    const parentStyle = {\n      width,\n      height,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    };\n\n    return <div style={parentStyle} ref={elem => this.ANIMATION_ROOT = elem} />;\n  }\n\n  getRendererSize() {\n    return getScaledRect({\n      container: this.props.parentSize,\n      target: this.CANVAS_SIZE,\n      policy: POLICY.ShowAll,\n    });\n  }\n\n  updateAnimationSize() {\n    const { renderer, stage } = this.PIXI_APP;\n    const { width, height } = this.getRendererSize();\n\n    renderer.resize(width, height);\n    stage.width = width;\n    stage.height = height;\n  }\n\n  generateSprites(spriteURI) {\n    const { PIXI_APP } = this;\n    const sheet = PIXI.Loader.shared.resources[spriteURI].spritesheet;\n\n    const frame = new PIXI.Sprite(sheet.textures['frame.png']);\n    const char = new PIXI.Sprite(sheet.textures['char.png']);\n    const char_sclera = new PIXI.Sprite(PIXI.Texture.WHITE);\n    const sky = new PIXI.Sprite(sheet.textures['sky.png']);\n\n    PIXI_APP.stage.addChild(sky);\n    PIXI_APP.stage.addChild(char_sclera);\n    PIXI_APP.stage.addChild(char);\n    PIXI_APP.stage.addChild(frame);\n\n    char_sclera.width = 221;\n    char_sclera.height = 79;\n    char_sclera.anchor.set(0.5); \n    char_sclera.position.set(1610.50, 1023.50);\n\n    char.anchor.set(0.5);\n    char.position.set(1611, 1385.50);\n\n    this.updateAnimationSize();\n  }\n}\n\nexport default Animation;\n","import React from 'react';\nimport debounce from 'lodash.debounce';\nimport { Size } from 'adaptive-scale/lib-esm';\nimport Animation from './Animation';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.setWindowSize = debounce(this.setWindowSize.bind(this), 225);\n\n    this.state = {\n      windowSize: new Size(window.innerWidth, window.innerHeight),\n    };\n  }\n\n  /**\n   * This function is (debounced and) re-run\n   * each time the browser window changes size.\n   * \n   * Sets `this.state.windowSize` to current\n   * browser viewport size as a Size() object.\n   */\n  setWindowSize() {\n    const newWindowSize = new Size(window.innerWidth, window.innerHeight);\n    const prevWindowSize = this.state.windowSize;\n\n    if (\n      newWindowSize.width === prevWindowSize.width &&\n      newWindowSize.height === prevWindowSize.height\n    ) return;\n\n    const windowSize = newWindowSize;\n    this.setState({ windowSize });\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setWindowSize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setWindowSize);\n  }\n\n  render() {\n\n    /**\n     * The main animation component expects a\n     * parentSize prop of Size() in order to\n     * contrain itself within the viewport.\n     */\n    return <Animation parentSize={this.state.windowSize} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n  * Welcome to Pitching and Moaning!\n  *\n  * This React application is a promotional\n  * webpage for Eavesdrop Media's new tele-\n  * vision series: Pitching and Moaning\n  *\n  * Check it out at www.pitchingandmoaning.com\n  */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'sanitize.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif (process.env.NODE_ENV)\n  switch(process.env.NODE_ENV) {\n    case 'development':\n      serviceWorker.unregister();\n      break;\n    default:\n      serviceWorker.register();\n  }\n"],"sourceRoot":""}